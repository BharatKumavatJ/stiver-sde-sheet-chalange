
import java.util.Arrays;
public class Solution {

    public static int dp[][];
	public static int lcs(String s, String t) {
    
		int l =  lcs(s, t, 0, 0);
       // print();
        return l;
    }
    public static void print()
    {
        for(int i = 0; i < dp.length; i++)
        {
            for(int j = 0; j < dp[i].length; j++)
            {
                System.out.print(dp[i][j] + " ");
            }
            System.out.println();
        }
    }
 

    public static int lcs(String s, String t, int i, int j){
        if(i == 0 && j == 0)
        {
            dp = new int[s.length() + 1][t.length() + 1];
            for(int k = 1; k < dp.length; k++)
            {
                Arrays.fill(dp[k], -1);
            }
            
            for(int k = 0; k < dp.length; k++)
            {
                dp[k][0] = 0;
            }
        }
        if(i == s.length() || j == t.length())
            return 0;
        
        if(s.charAt(i) == t.charAt(j))
            return 1 + lcs(s, t, i + 1, j + 1);
        
        if(dp[i + 1][j + 1] != -1)
        {
            return dp[i + 1][j + 1];
        }
        int skipS = lcs(s, t, i + 1, j);
        int skipT = lcs(s, t, i, j + 1);
        
        return dp[i + 1][j + 1] = Math.max(skipS, skipT);
    }
}
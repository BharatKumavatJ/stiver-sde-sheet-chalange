import java.util.Arrays;
public class Solution {
    public static int dp[][]; 
    public static boolean subsetSumToK(int n, int k, int arr[]){
        // Write your code here.
       if(n == arr.length)
        {
            dp = new int[n + 1][k + 1];
            
            for(int i = 0; i < dp.length; i++) Arrays.fill(dp[i], -1);
        }
        if(k == 0)
            return true;
        if(n == 0)
            return false;
       if(k < 0)
           return subsetSumToK(n -1, k, arr);
        if(dp[n][k] != -1)
         return dp[n][k] == 1 ? true : false;
       boolean isSubset = subsetSumToK(n - 1, k - arr[n -1], arr) || subsetSumToK(n -1, k, arr);
        if(isSubset == true)
            dp[n][k] = 1;
        else
            dp[n][k] = 0;
        return isSubset;
        
            
    }
}

/*********************************************

    class BinaryTreeNode {
        int val;
        BinaryTreeNode left;
        BinaryTreeNode right;

        BinaryTreeNode(int val) {
            this.val = val;
            this.left = null;
            this.right = null;
        }
    }

*********************************************/
import java.util.*;

class Pair{
    BinaryTreeNode node;
    int level;
    
    public Pair(int level, BinaryTreeNode node){
        this.node = node;
        this.level = level;
    }
}
public class Solution {
    public static ArrayList<Integer> bottomView(BinaryTreeNode root) {
         // Write your code here
        
        HashMap<Integer, BinaryTreeNode> hm = new HashMap<>();
        Queue<Pair> q = new LinkedList<>();
        int min = 1, max = -1;
        q.add(new Pair(0, root));
        
        while(q.isEmpty() == false){
            
            Pair temp = q.poll();
            min = Math.min(temp.level, min);
            max = Math.max(temp.level, max);
           
           
            hm.put(temp.level, temp.node);                  
           
            if(temp.node.left != null){
                q.add(new Pair(temp.level - 1, temp.node.left));
            }
            if(temp.node.right != null){
                q.add(new Pair(temp.level + 1, temp.node.right));
            }
        }
        ArrayList<Integer> ans = new ArrayList<>();
        for(int i = min; i <= max; i++){
        
            ans.add(hm.get(i).val);
        }
                 
           return ans;
    }
}

import java.util.* ;
import java.io.*; 
public class Solution {
    public static long getInversions(long arr[], int n) {
        // Write your code here.1
        
        return mergeSort(arr, 0, n -1);
        
    }
    
    public static long mergeSort(long arr[], int l, int r)
    {
        long count = 0;
        if(l < r)
        {
           
            int mid = l + (r - l)/2;
            count += mergeSort(arr, l, mid);
            count += mergeSort(arr, mid + 1, r);
            
            count += merge(arr, mid, l, r);
        }
        return count;
    }
    
    public static long merge(long arr[], int mid, int l, int r)
    {
        // calculate the length of left and right subarray
        int lsize = mid - l + 1;
        int rsize = r - mid;
        
        // declare left and right subaary 
        long left[] = new long[lsize];
        long right[] = new long[rsize];
        
        
        for(int i = 0; i < lsize; i++)
        {
            left[i] = arr[l + i];
        }
        for(int i= 0; i < rsize; i++)
        {
            right[i] = arr[mid + 1 + i];
        }
        long count = 0l;
        int k = l, i = 0, j = 0; // i -> left j -> right k - > arr
        
        while(i < lsize && j < rsize)
        {
            if(left[i] <= right[j])
            {
                arr[k++] = left[i++];
            }
            else
            {
                count += lsize - i;
                arr[k++] = right[j++];
            }
        }
         
        while(i < lsize)
        {
            arr[k++] = left[i++];
        }
        while(j < rsize)
        {
            arr[k++] = right[j++];
        }
        return count;
        
        
    }
    
}
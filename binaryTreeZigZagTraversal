/*
	Following is the class used to represent the object/node of the Binary Tree

	class BinaryTreeNode<T> {
	    T data;
	    BinaryTreeNode<T> left;
	    BinaryTreeNode<T> right;

	    public BinaryTreeNode(T data) {
	        this.data = data;
	    }
	}
*/
import java.util.*;
public class Solution {
	public static List<Integer> zigZagTraversal(BinaryTreeNode<Integer> root) {
		Queue<BinaryTreeNode<Integer>> q = new LinkedList<>();
        List<Integer> ans = new ArrayList<>();
        if(root == null)
            return ans;
        q.add(root);
        int level = 0;
        while(q.isEmpty() == false){
            int size = q.size();
            if(level % 2 == 0){
                for(int i = 0; i < size; i++){
                    BinaryTreeNode<Integer> temp = q.poll();
                    ans.add(temp.data);
                    if(temp.left != null){
                        q.add(temp.left);
                    }
                    if(temp.right != null){
                        q.add(temp.right);
                    }
                }
            }else{
                ArrayList<Integer> al = new ArrayList<>();
                for(int i = 0; i < size; i++){
                    BinaryTreeNode<Integer> temp = q.poll();
                    al.add(temp.data);
                    if(temp.left != null){
                        q.add(temp.left);
                    }
                    if(temp.right != null){
                        q.add(temp.right);
                    }
                }
                for(int i = al.size() - 1; i >= 0; i--){
                    ans.add(al.get(i));
                }
                
            }
            level++;
            
        }
        return ans;
	}
}
